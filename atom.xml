<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason</title>
  
  <link href="/en/atom.xml" rel="self"/>
  
  <link href="http://atjason.com/en/"/>
  <updated>2016-05-07T05:12:25.000Z</updated>
  <id>http://atjason.com/en/</id>
  
  <author>
    <name>Jason</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Action When Enter-key is Pressed on NSTextField</title>
    <link href="http://atjason.com/en/Cocoa/Action%20When%20Enter-key%20is%20Pressed%20on%20NSTextField.html"/>
    <id>http://atjason.com/en/Cocoa/Action When Enter-key is Pressed on NSTextField.html</id>
    <published>2016-04-17T03:45:00.000Z</published>
    <updated>2016-05-07T05:12:25.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Add-Action-in-NSTextField’s-Delegate&quot;&gt;&lt;a href=&quot;#Add-Action-in-NSTextField’s-Delegate&quot; class=&quot;headerlink&quot; title=&quot;Add Action in NSTextField’s Delegate&quot;&gt;&lt;/a&gt;Add Action in NSTextField’s Delegate&lt;/h1&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;textFieldAction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(sender: NSTextField)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(sender.stringValue)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Connect-NSTextField’s-Action-to-Delegate’s-One&quot;&gt;&lt;a href=&quot;#Connect-NSTextField’s-Action-to-Delegate’s-One&quot; class=&quot;headerlink&quot; title=&quot;Connect NSTextField’s Action to Delegate’s One&quot;&gt;&lt;/a&gt;Connect NSTextField’s Action to Delegate’s One&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;../media/Connect.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Set-NSTextField’s-Action-Type&quot;&gt;&lt;a href=&quot;#Set-NSTextField’s-Action-Type&quot; class=&quot;headerlink&quot; title=&quot;Set NSTextField’s Action Type&quot;&gt;&lt;/a&gt;Set NSTextField’s Action Type&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;../media/SelectAction.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Add-Action-in-NSTextField’s-Delegate&quot;&gt;&lt;a href=&quot;#Add-Action-in-NSTextField’s-Delegate&quot; class=&quot;headerlink&quot; title=&quot;Add Action in NSText
    
    </summary>
    
      <category term="Cocoa" scheme="http://atjason.com/en/categories/Cocoa/"/>
    
    
  </entry>
  
  <entry>
    <title>XCode Debug Flag for Swift</title>
    <link href="http://atjason.com/en/Cocoa/XCode%20Debug%20Flag%20for%20Swift.html"/>
    <id>http://atjason.com/en/Cocoa/XCode Debug Flag for Swift.html</id>
    <published>2016-04-16T12:34:00.000Z</published>
    <updated>2016-05-07T05:12:22.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Set-Debug-Flag-in-XCode-for-Swift&quot;&gt;&lt;a href=&quot;#Set-Debug-Flag-in-XCode-for-Swift&quot; class=&quot;headerlink&quot; title=&quot;Set Debug Flag in XCode for Swift&quot;&gt;&lt;/a&gt;Set Debug Flag in XCode for Swift&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Open ‘Build Settings’ for Project (not target)&lt;/li&gt;
&lt;li&gt;Search ‘&lt;strong&gt;Swift Compiler - Custom Flags&lt;/strong&gt;‘. Add a &lt;code&gt;-D DEBUG&lt;/code&gt; entry in &lt;code&gt;Other Swift Flags&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/DebugFlag.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Use-Debug-Flag-in-Swift&quot;&gt;&lt;a href=&quot;#Use-Debug-Flag-in-Swift&quot; class=&quot;headerlink&quot; title=&quot;Use Debug Flag in Swift&quot;&gt;&lt;/a&gt;Use Debug Flag in Swift&lt;/h1&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;DEBUG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;I&#39;m running in DEBUG mode&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;I&#39;m running in a non-DEBUG mode&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Set-Debug-Flag-in-XCode-for-Swift&quot;&gt;&lt;a href=&quot;#Set-Debug-Flag-in-XCode-for-Swift&quot; class=&quot;headerlink&quot; title=&quot;Set Debug Flag in XCode fo
    
    </summary>
    
      <category term="Cocoa" scheme="http://atjason.com/en/categories/Cocoa/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift &amp; Cocoa: Localization</title>
    <link href="http://atjason.com/en/Cocoa/Swift%20&%20Cocoa:%20Localization.html"/>
    <id>http://atjason.com/en/Cocoa/Swift & Cocoa: Localization.html</id>
    <published>2016-04-15T04:20:00.000Z</published>
    <updated>2016-05-07T05:14:48.000Z</updated>
    
    <content type="html">&lt;p&gt;This article records the detailed steps to add localizations for a project. The project could be downloaded &lt;a href=&quot;https://github.com/atjason/LearnCocoaWithSwift/tree/master/26_LocalizationAndBundles/LocalizationDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Development environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS X: 10.11.4&lt;/li&gt;
&lt;li&gt;XCode: 7.3&lt;/li&gt;
&lt;li&gt;Swift: 2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#Auto Layout and Double-Length Pseudolanguage&lt;br&gt;For localized app, typically you need to set the UI to ‘&lt;strong&gt;Auto Layout&lt;/strong&gt;‘. As the same string in different languages may have very different length, the ‘auto layout’ could let each language corecttly display.&lt;/p&gt;
&lt;p&gt;How to test the auto layout correclty work or not? Beside really test the app with different language, you can also use ‘&lt;strong&gt;Double-Length Pseudolanguage&lt;/strong&gt;‘. This localization simply takes the text of your development language, and doubles it. So, for example, “Tell the World” becomes “Tell the World Tell the World.” While many pieces of text won’t actually double in length when translated to another langauge, it serves as a great way to test to see whether your interface can handle the wide variation in length.&lt;/p&gt;
&lt;p&gt;Steps to preview a localization in Interface Builder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In project navigator, select the &lt;code&gt;.storyboard&lt;/code&gt; or &lt;code&gt;.xib&lt;/code&gt; file you want to preview.&lt;/li&gt;
&lt;li&gt;Choose View &amp;gt; Assistant Editor &amp;gt; Show Assistant Editor.&lt;/li&gt;
&lt;li&gt;In the assistant editor jump bar, open the Assistant pop-up menu, scroll to and choose the Preview item, and choose the &lt;code&gt;.storyboard&lt;/code&gt; or &lt;code&gt;.xib&lt;/code&gt; file from the submenu.&lt;br&gt;If a preview of the app’s user interface doesn’t appear in the assistant editor, select the window or view you want to preview in the icon or outline view.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/SelectPreview.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the assistant editor, choose the localization you want to preview from the language pop-up menu in the lower-right corner.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/SelectPseudolanguage.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now, a preview of the localization appears in the assistant editor. If you choose a real language, strings that do not need to be localized or need to be localized, but currently are not, appear in uppercase.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;#Use Localized String in Code&lt;br&gt;The key is to use &lt;code&gt;NSLocalizedString&lt;/code&gt; function. It could load localized text from the localized string file.&lt;/p&gt;
&lt;p&gt;To explicit ordering of tokens in format strings, could use &lt;code&gt;%1$@&lt;/code&gt;, &lt;code&gt;%2$@&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;The related code is:&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setLabelStrings&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dateFormatter = &lt;span class=&quot;type&quot;&gt;NSDateFormatter&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  dateFormatter.dateStyle = .&lt;span class=&quot;type&quot;&gt;NoStyle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  dateFormatter.timeStyle = .&lt;span class=&quot;type&quot;&gt;ShortStyle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dateString = dateFormatter.stringFromDate(&lt;span class=&quot;type&quot;&gt;NSDate&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  question = &lt;span class=&quot;type&quot;&gt;NSLocalizedString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Q: What&#39;s the time now?&quot;&lt;/span&gt;, comment: &lt;span class=&quot;string&quot;&gt;&quot;Question&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  answer = &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;(format: &lt;span class=&quot;type&quot;&gt;NSLocalizedString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;A: It&#39;s %@.&quot;&lt;/span&gt;, comment: &lt;span class=&quot;string&quot;&gt;&quot;Answer&quot;&lt;/span&gt;), dateString)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;#Add Localization Language for Project&lt;br&gt;Add a new localization to the project could make Xcode aware that you want to start translating files into that language, which means you can do things like select that language in the Preview assistant.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the project in the project navigator.&lt;br&gt;Note: It’s &lt;strong&gt;PROJECT&lt;/strong&gt;, but not targets.&lt;/li&gt;
&lt;li&gt;Add the new localization.&lt;br&gt;Scroll down to the Localizations section. Click the + button, and select ‘Chinese (Simplified)’ from the menu that appears&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/ProjectAddLanguage.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the files you want to localize.&lt;br&gt;Xcode will ask you which files you want to translate into the new language. At this stage, there will only be a single file: the app’s interface, stored in MainMenu.xib. It’s selected by default, so click Finish.&lt;br&gt;Note: select “Locializable Strings”, but not ‘Interface Builder Story’.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/ProjectAddLanguageSelectBase.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new file will be created: a strings file for the storyboard file. It’ll appear as an item inside the storyboard file, in the project navigator.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/MainStoryboardWithLocalization.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;#Add Localizations Files&lt;/p&gt;
&lt;p&gt;To well organize the localized strings, it’s better we manually add 2 string files here: ‘&lt;strong&gt;Localizable.strings&lt;/strong&gt;‘ and ‘&lt;strong&gt;InfoPlist.strings&lt;/strong&gt;‘. ‘Localizable.strings’ will store the strings in app. For ‘InfoPlist.strings’, please check the following introduction.&lt;/p&gt;
&lt;p&gt;##Localizing Property List Values&lt;br&gt;The values for many keys in an information property list file are human-readable strings that are displayed to the user by the Finder or your own app. When you localize your app, you should be sure to localize the values for these strings in addition to the rest of your app’s content.&lt;/p&gt;
&lt;p&gt;Localized values are not stored in the Info.plist file itself. Instead, you store the values for a particular localization in a strings file with the name ‘&lt;strong&gt;InfoPlist.strings&lt;/strong&gt;‘. You place this file in the same language-specific project directory that you use to store other resources for the same localization. The contents of the InfoPlist.strings file are the individual keys you want localized and the appropriately translated value. The routines that look up key values in the Info.plist file take the user’s language preferences into account and return the localized version of the key (from the appropriate InfoPlist.strings file) when one exists. If a localized version of a key does not exist, the routines return the value stored in the Info.plist file.&lt;/p&gt;
&lt;p&gt;##Add ‘Localizable.strings’ and ‘InfoPlist.strings’&lt;br&gt;Before add the strings files, it’s better to add a ‘Localizations’ group in project. And it’s also better to create the corresponding folder in Finder.&lt;/p&gt;
&lt;p&gt;Now it’s time really add the string files.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new file in the project: a strings file. You’ll find this in the Resource section of the file templates. Name the file as ‘Localizable.strings’, save in the ‘Localizations’ folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/AddStringsFile.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the ‘Localizable.strings’ file. Open the ‘File Inspector’ and scroll down to Localizations.&lt;br&gt;Click the Localize button. A menu will appear; choose Base and click Localize.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now the localization option has changed, with three small checkboxes, one for Base, one for English, and the last for Chinese Simplified. Select Base and Chinese Simplified. In fact the Base is just English as we choose English as development language.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/LocalizationFileWithoutString.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now create ‘InfoPlist.strings’ and did same settings as ‘Localizable.strings’. The difference is, save the ‘InfoPlist.strings’ in same level of ‘Localizations’ in Finder, but still in the ‘Localizations’ group in project. After set it as localization, it will auto matically be moved to ‘Base.lproj’ and ‘zh-Hans.lproj’ in Finder.&lt;/p&gt;
&lt;p&gt;How to localize the app’s name displayed with app icon in Finder? Add this string in Base version of ‘InfoPlist.strings’:&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* App Name */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;CFBundleDisplayName&quot;&lt;/span&gt; =&lt;span class=&quot;string&quot;&gt;&quot;Localization Demo&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;And add this for the Chinese Simplified version:&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* App Name */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;CFBundleDisplayName&quot;&lt;/span&gt; =&lt;span class=&quot;string&quot;&gt;&quot;本地化示例&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;br&gt;It’s important to use the file names of ‘InfoPlist.strings’ and ‘Localizable.strings’, as the app will look for the files with these names.&lt;/p&gt;
&lt;p&gt;After added, the files in Finder will looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/FinderFileTree.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;#Edit Localization Files&lt;br&gt;There’re 2 ways to edit the localization files: Direclty Edit and Using .xliff Files. Now let’s introduce the .xliff files.&lt;/p&gt;
&lt;p&gt;Normally, you don’t translate the app by yourself, but let some others who are expert for the language to do it. How to cooperate with them? Use .xliff file.&lt;/p&gt;
&lt;p&gt;##Export .xliff Files&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the root of the project.&lt;/li&gt;
&lt;li&gt;Select ‘Editor’ menu &amp;gt; ‘Export for localization…’. In the popup dialog, select where to store the files. Need to select ‘Chinese (Simplied)’ in languages. This means export the .xliff file for the languages selected. Click ‘Save’.&lt;br&gt;&lt;img src=&quot;../media/ExportLocalization1.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;Open the ‘zh-Hans.xliff’ you just saved. You can see it’s like a xml file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Edit parts for ‘Localizable.strings’. Find the following part, add &lt;code&gt;&amp;lt;target&amp;gt;...&amp;lt;/target&amp;gt;&lt;/code&gt; under the &lt;code&gt;&amp;lt;source&amp;gt;A: It&amp;#39;s %@.&amp;lt;/source&amp;gt;&lt;/code&gt;. This is just the core of ‘localization’.&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;original&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;LocalizationDemo/Localizable.strings&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;source-language&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;datatype&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;plaintext&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;target-language&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;zh-Hans&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tool&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;tool-id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.apple.dt.xcode&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;tool-name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Xcode&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;tool-version&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;7.3&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;build-num&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;7D175&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;trans-unit&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;A: It&#39;s %@.&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;source&lt;/span&gt;&amp;gt;&lt;/span&gt;A: It&#39;s %@.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;source&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;target&lt;/span&gt;&amp;gt;&lt;/span&gt;答：现在是 %@。&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;target&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;note&lt;/span&gt;&amp;gt;&lt;/span&gt;Answer&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;note&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;trans-unit&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;trans-unit&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Q: What&#39;s the time now?&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;source&lt;/span&gt;&amp;gt;&lt;/span&gt;Q: What&#39;s the time now?&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;source&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;target&lt;/span&gt;&amp;gt;&lt;/span&gt;问：现在几点了？&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;target&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;note&lt;/span&gt;&amp;gt;&lt;/span&gt;Question&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;note&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;trans-unit&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;##Import .xliff Files&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the root of the project.&lt;/li&gt;
&lt;li&gt;Select ‘Editor’ menu &amp;gt; ‘Import localization…’. In the popup dialog, select the ‘zh-Hans.xliff’ you just modified. It should pop up a dialog to show the difference between the files in project and the one you just modified. Click ‘Import’ if it’s fine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/ImportLocalization1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/ImportLocalization2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;After it’s done, open the ‘InfoPlist.strings’ or ‘Localizable.strings’, you should be able to say the new translated strings. Did you remember I just said there’re 2 ways to edit the string files, and another one is directly edit it? Here it is, you can directly edit the files and add the strings like you added through .xliff.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/LocalizationFileWithString.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special Tips&lt;/strong&gt;&lt;br&gt;Seems XCode has issue. If you project has test or other target, if you import the modified strings for the first, the XCode may crash.&lt;br&gt;The solution is, export strings, don’t change it and import again.&lt;br&gt;I guess this mainly let the test or other project be localized. Even you don’t need to localize them, but have to do it to walk around XCode’s issue (again, it’s what I guess).&lt;/p&gt;
&lt;p&gt;#Test Localization&lt;br&gt;There’re 2 ways to test the localization.&lt;/p&gt;
&lt;p&gt;##1. Change System’s Language&lt;br&gt;Open ‘System Preferences’ &amp;gt; ‘Language &amp;amp; Region’, you can drag Chinese Simplied to top of the list to activate it. You can also change the ragion.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/ChangeSystemLanguage.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The disadvantage of this way is, you need to reboot to let the change work. And the entire system’s language will be changed. How only change the language for the app? Check the following way.&lt;/p&gt;
&lt;p&gt;##2. Use XCode’s Scheme&lt;br&gt;You can make Xcode launch the application using the special langauge or region.&lt;br&gt;To do this, you can duplicate current scheme, name it as ‘Chinese (Simplified)’. Open the Options panel. Change the Application Language from System Language to ‘Chinese (Simplified)’.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/DuplicateScheme.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/SelectChineseInScheme.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now, run the app, it should look like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/LocalizedApp.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This article records the detailed steps to add localizations for a project. The project could be downloaded &lt;a href=&quot;https://github.com/atjason/LearnCocoaWithSwift/tree/master/26_LocalizationAndBundles/LocalizationDemo&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Development environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS X: 10.11.4&lt;/li&gt;
&lt;li&gt;XCode: 7.3&lt;/li&gt;
&lt;li&gt;Swift: 2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#Auto Layout and Double-Length Pseudolanguage&lt;br&gt;For localized app, typically you need to set the UI to ‘&lt;strong&gt;Auto Layout&lt;/strong&gt;‘. As the same string in different languages may have very different length, the ‘auto layout’ could let each language corecttly display.&lt;/p&gt;
&lt;p&gt;How to test the auto layout correclty work or not? Beside really test the app with different language, you can also use ‘&lt;strong&gt;Double-Length Pseudolanguage&lt;/strong&gt;‘. This localization simply takes the text of your development language, and doubles it. So, for example, “Tell the World” becomes “Tell the World Tell the World.” While many pieces of text won’t actually double in length when translated to another langauge, it serves as a great way to test to see whether your interface can handle the wide variation in length.&lt;/p&gt;
&lt;p&gt;Steps to preview a localization in Interface Builder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In project navigator, select the &lt;code&gt;.storyboard&lt;/code&gt; or &lt;code&gt;.xib&lt;/code&gt; file you want to preview.&lt;/li&gt;
&lt;li&gt;Choose View &amp;gt; Assistant Editor &amp;gt; Show Assistant Editor.&lt;/li&gt;
&lt;li&gt;In the assistant editor jump bar, open the Assistant pop-up menu, scroll to and choose the Preview item, and choose the &lt;code&gt;.storyboard&lt;/code&gt; or &lt;code&gt;.xib&lt;/code&gt; file from the submenu.&lt;br&gt;If a preview of the app’s user interface doesn’t appear in the assistant editor, select the window or view you want to preview in the icon or outline view.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/SelectPreview.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the assistant editor, choose the localization you want to preview from the language pop-up menu in the lower-right corner.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/SelectPseudolanguage.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now, a preview of the localization appears in the assistant editor. If you choose a real language, strings that do not need to be localized or need to be localized, but currently are not, appear in uppercase.&lt;/p&gt;
    
    </summary>
    
      <category term="Cocoa" scheme="http://atjason.com/en/categories/Cocoa/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift &amp; Cocoa: Auto Launch at Login</title>
    <link href="http://atjason.com/en/Cocoa/Swift%20&%20Cocoa:%20Auto%20Launch%20at%20Login.html"/>
    <id>http://atjason.com/en/Cocoa/Swift & Cocoa: Auto Launch at Login.html</id>
    <published>2016-04-14T08:50:00.000Z</published>
    <updated>2016-05-07T05:14:40.000Z</updated>
    
    <content type="html">&lt;p&gt;This article is based on this &lt;a href=&quot;http://martiancraft.com/blog/2015/01/login-items/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;blog&lt;/a&gt;. I adjust and implement using Swift. The project could be downloaded &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/tree/master/AutoLaunch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Development environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS X: 10.11.4&lt;/li&gt;
&lt;li&gt;XCode: 7.3&lt;/li&gt;
&lt;li&gt;Swift: 2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#Enable ‘launch at login’ in Mac App Store&lt;br&gt;Beside works in sandbox mode, to enable ‘launch at login’ in Mac App Store, should mee this requirement:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2.26 Apps that are set to auto-launch or to have other code automatically run at startup or login without user consent will be rejected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How to deal with it?&lt;br&gt;Easy, just add a checkbox in Preferences to let user choose auto launch or not. And, make sure, do &lt;strong&gt;NOT&lt;/strong&gt; enable it by default. Otherwise Apple will reject it (I was ever rejected for this reason).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/AutoLaunchApp.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;#Steps&lt;br&gt;The precondition is, you already setup your normal project.&lt;/p&gt;
&lt;p&gt;##Add New Target of Helper&lt;br&gt;Add a new target of your project. You can name the target as “XHelper”, and “X” is your main project.&lt;br&gt;Note: to reduce app’s size, choose the Language of ‘Objective-C’. No worry, only a few code is needed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Add Helper Target.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Settings-for-Helper-Target&quot;&gt;&lt;a href=&quot;#Settings-for-Helper-Target&quot; class=&quot;headerlink&quot; title=&quot;Settings for Helper Target&quot;&gt;&lt;/a&gt;Settings for Helper Target&lt;/h2&gt;&lt;p&gt;Let the helper works in the background and doesn’t display a Dock icon.&lt;br&gt;Open the &lt;strong&gt;Info&lt;/strong&gt; tab for the helper target.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Under the ‘Custom OS X Application Target Properties’ section, add a new row with the Key ‘&lt;strong&gt;Application is background only&lt;/strong&gt;’ and the Boolean value of ‘&lt;strong&gt;YES&lt;/strong&gt;’.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/Helper in Background.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next, let the helper target skips the install when the base application also gets installed. To do this:&lt;br&gt;Open the &lt;strong&gt;Build Settings&lt;/strong&gt; tab for the helper target.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Search for ‘&lt;strong&gt;Skip Install&lt;/strong&gt;’, setting this option to ‘&lt;strong&gt;YES&lt;/strong&gt;’&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/HelperSkipInstall.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Settings-for-Main-Target&quot;&gt;&lt;a href=&quot;#Settings-for-Main-Target&quot; class=&quot;headerlink&quot; title=&quot;Settings for Main Target&quot;&gt;&lt;/a&gt;Settings for Main Target&lt;/h2&gt;&lt;p&gt;Open the &lt;strong&gt;Build Settings&lt;/strong&gt; tab for the main target.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Search for the item called ‘&lt;strong&gt;Strip Debug Symbols During Copy&lt;/strong&gt;’, and set this item to ‘&lt;strong&gt;NO&lt;/strong&gt;’.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/Strip Debug Symbols During Copy.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Open the &lt;strong&gt;Build Phases&lt;/strong&gt; tab for the main target&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you don’t already have a ‘Copy Files’ phase, then add one by selecting the small + sign in the top left corner of this section.&lt;/li&gt;
&lt;li&gt;Expand the ‘Copy Files’ phase, and select ‘&lt;strong&gt;Wrapper&lt;/strong&gt;’ from the Destination drop-down menu&lt;/li&gt;
&lt;li&gt;In the Subpath section, type the following path: “&lt;strong&gt;Contents/Library/LoginItems&lt;/strong&gt;“&lt;/li&gt;
&lt;li&gt;Select the + button for the Name section, then search for and add the ‘X Helper.app’ application bundle from the source list that appears, and select it in the list. Click ‘Add’ when done.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/Copy Helper Files.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;This will ensure that the Helper target is copied into our application bundle when we compile the project.&lt;/p&gt;
&lt;h2 id=&quot;Code-for-Helper-Target&quot;&gt;&lt;a href=&quot;#Code-for-Helper-Target&quot; class=&quot;headerlink&quot; title=&quot;Code for Helper Target&quot;&gt;&lt;/a&gt;Code for Helper Target&lt;/h2&gt;&lt;p&gt;First, remove the menu and base window in the Helper app’s XIB file.&lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;AppDelegate.m&lt;/code&gt;, add these code in &lt;code&gt;applicationDidFinishLaunching&lt;/code&gt;. It will find out the path for the main application, launch it, and then terminate itself.&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)applicationDidFinishLaunching:(&lt;span class=&quot;built_in&quot;&gt;NSNotification&lt;/span&gt; *)aNotification &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *pathComponents = [[[&lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; mainBundle] bundlePath] pathComponents];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pathComponents = [pathComponents subarrayWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, [pathComponents count] - &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *path = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; pathWithComponents:pathComponents];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [[&lt;span class=&quot;built_in&quot;&gt;NSWorkspace&lt;/span&gt; sharedWorkspace] launchApplication:path];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;built_in&quot;&gt;NSApp&lt;/span&gt; terminate:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Code-for-Main-Target&quot;&gt;&lt;a href=&quot;#Code-for-Main-Target&quot; class=&quot;headerlink&quot; title=&quot;Code for Main Target&quot;&gt;&lt;/a&gt;Code for Main Target&lt;/h2&gt;&lt;p&gt;There’re mainly 2 parts.&lt;/p&gt;
&lt;h3 id=&quot;Add-Preferences&quot;&gt;&lt;a href=&quot;#Add-Preferences&quot; class=&quot;headerlink&quot; title=&quot;Add Preferences&quot;&gt;&lt;/a&gt;Add Preferences&lt;/h3&gt;&lt;p&gt;This is mainly to remember user’s choice to auto launch or not. For details, refer to my another &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/tree/master/Preferences&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;project for Preferences&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Set-Auto-Launch&quot;&gt;&lt;a href=&quot;#Set-Auto-Launch&quot; class=&quot;headerlink&quot; title=&quot;Set Auto Launch&quot;&gt;&lt;/a&gt;Set Auto Launch&lt;/h3&gt;&lt;p&gt;This step is in fact easy. The core is function of &lt;code&gt;SMLoginItemSetEnabled&lt;/code&gt;. Remember to &lt;code&gt;import ServiceManagement&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Cocoa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ServiceManagement&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainWindowController&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSWindowController&lt;/span&gt; &lt;/span&gt;&amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(sender: NSButton)&lt;/span&gt;&lt;/span&gt; &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; appBundleIdentifier = &lt;span class=&quot;string&quot;&gt;&quot;com.atjason.swift.cocoa.AutoLaunchHelper&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; autoLaunch = (autoLaunchCheckbox.state == &lt;span class=&quot;type&quot;&gt;NSOnState&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;SMLoginItemSetEnabled&lt;/span&gt;(appBundleIdentifier, autoLaunch) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; autoLaunch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Successfully add login item.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Successfully remove login item.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;type&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Failed to add login item.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Test-Auto-Launch&quot;&gt;&lt;a href=&quot;#Test-Auto-Launch&quot; class=&quot;headerlink&quot; title=&quot;Test Auto Launch&quot;&gt;&lt;/a&gt;Test Auto Launch&lt;/h1&gt;&lt;p&gt;In theory, your app and helper should meet these requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Move the app in the /Applications folder.&lt;/li&gt;
&lt;li&gt;Both the main and Helper application are signed.&lt;/li&gt;
&lt;li&gt;Both the main and Helper application are sandboxed. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But in fact, when my test app meet none of the requirements above, it still can auto lauch after reboot. Not sure why, but if you plan to release your app in Mac App Store, obviously these requirements will be met. &lt;/p&gt;
&lt;p&gt;Good luck.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This article is based on this &lt;a href=&quot;http://martiancraft.com/blog/2015/01/login-items/&quot;&gt;blog&lt;/a&gt;. I adjust and implement using Swift. The project could be downloaded &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/tree/master/AutoLaunch&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Development environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS X: 10.11.4&lt;/li&gt;
&lt;li&gt;XCode: 7.3&lt;/li&gt;
&lt;li&gt;Swift: 2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#Enable ‘launch at login’ in Mac App Store&lt;br&gt;Beside works in sandbox mode, to enable ‘launch at login’ in Mac App Store, should mee this requirement:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2.26 Apps that are set to auto-launch or to have other code automatically run at startup or login without user consent will be rejected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How to deal with it?&lt;br&gt;Easy, just add a checkbox in Preferences to let user choose auto launch or not. And, make sure, do &lt;strong&gt;NOT&lt;/strong&gt; enable it by default. Otherwise Apple will reject it (I was ever rejected for this reason).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/AutoLaunchApp.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Cocoa" scheme="http://atjason.com/en/categories/Cocoa/"/>
    
    
  </entry>
  
  <entry>
    <title>Preferences Window</title>
    <link href="http://atjason.com/en/Cocoa/Preferences%20Window.html"/>
    <id>http://atjason.com/en/Cocoa/Preferences Window.html</id>
    <published>2016-04-13T07:42:00.000Z</published>
    <updated>2016-05-07T05:14:35.000Z</updated>
    
    <content type="html">&lt;p&gt;This article introduces how to build preferences window on Mac OS X using Cocoa with Swift. The source code can be downloaded &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/tree/master/Preferences&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Development environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS X: 10.11.4&lt;/li&gt;
&lt;li&gt;XCode: 7.3&lt;/li&gt;
&lt;li&gt;Swift: 2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After it’s finished, the app looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Preferences Window.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;#NSTabViewController&lt;br&gt;The mainly used class is &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/AppKit/Reference/NSTabViewController_Class/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;NSTabViewController&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;An &lt;code&gt;NSTabViewController&lt;/code&gt; object is a container view controller that manages a tab view interface, which organizes multiple pages of content but displays only one of those pages at a time. Each page of content is managed by a separate child view controller. Navigation between child view controllers is accomplished with the help of an NSTabView object, which the tab view controller manages. When the user selects a new tab, the tab view controller displays the content associated with the associated child view controller, replacing the previous content.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;#Storyboard&lt;br&gt;Storyboard isn’t necessary to build preferences window, but it could let the workflow be clear and simple.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Storyboard.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;#Preference Manager&lt;br&gt;Typically there’re many settings in preferences. To make it easy to manage all of them, it’s better to use one singleton class to access them, e.g., register factory defaults, read, write, reset, etc.&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PreferenceManager&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Single instance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sharedInstance = &lt;span class=&quot;type&quot;&gt;PreferenceManager&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    registerFactoryDefaults()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; userDefaults = &lt;span class=&quot;type&quot;&gt;NSUserDefaults&lt;/span&gt;.standardUserDefaults()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; initializedKey = &lt;span class=&quot;string&quot;&gt;&quot;Initialized&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; startAtLogin: &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; userDefaults.boolForKey(startAtLoginKey)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      userDefaults.setBool(newValue, forKey: startAtLoginKey)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;registerFactoryDefaults&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; factoryDefaults = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      initializedKey: &lt;span class=&quot;type&quot;&gt;NSNumber&lt;/span&gt;(bool: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    userDefaults.registerDefaults(factoryDefaults)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;synchronize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    userDefaults.synchronize()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    userDefaults.removeObjectForKey(initializedKey)    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    synchronize()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;#Bind with User Defaults&lt;br&gt;Beside using &lt;code&gt;class PreferenceManager&lt;/code&gt;, you can also directly bind object’s value to user defaults.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Bind.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;#Register Factory Defaults&lt;br&gt;It’s better each setting has default value. &lt;code&gt;NSUserDefaults.registerDefaults&lt;/code&gt; works for it.&lt;br&gt;&lt;strong&gt;Note&lt;/strong&gt;: The contents of the registration domain are not written to disk; you need to call this method each time your application starts. You can place a plist file in the application’s Resources directory and call registerDefaults: with the contents that you read in from that file.&lt;/p&gt;
&lt;p&gt;#Archive&lt;br&gt;To store data in user defaults, the object need to support archvie. For key based archive, the class need to conform to &lt;code&gt;NSCoding&lt;/code&gt;. For more introduction, please refer to &lt;a href=&quot;https://github.com/atjason/LearnCocoaWithSwift/tree/master/12_Archiving/RaiseMan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;#Store Tab View’s Size&lt;br&gt;If you allow user to resize the size of each tab view, its better to store them in user defaults, and restore when user access preferences window again. But as the structure of &lt;code&gt;NSSize&lt;/code&gt; doesn’t support archive, you need to use a class to archive it.&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SizeArchiver&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;NSCoding&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sizeKey = &lt;span class=&quot;string&quot;&gt;&quot;Size&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; size = &lt;span class=&quot;type&quot;&gt;NSSize&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; width: &lt;span class=&quot;type&quot;&gt;CGFloat&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; size.width&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; height: &lt;span class=&quot;type&quot;&gt;CGFloat&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; size.height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(size: &lt;span class=&quot;type&quot;&gt;NSSize&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.size = size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// MARK: - NSCoding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;?(coder aDecoder: &lt;span class=&quot;type&quot;&gt;NSCoder&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.size = aDecoder.decodeSizeForKey(&lt;span class=&quot;type&quot;&gt;SizeArchiver&lt;/span&gt;.sizeKey)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;encodeWithCoder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(aCoder: NSCoder)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    aCoder.encodeSize(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.size, forKey: &lt;span class=&quot;type&quot;&gt;SizeArchiver&lt;/span&gt;.sizeKey)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This article introduces how to build preferences window on Mac OS X using Cocoa with Swift. The source code can be downloaded &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/tree/master/Preferences&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Development environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS X: 10.11.4&lt;/li&gt;
&lt;li&gt;XCode: 7.3&lt;/li&gt;
&lt;li&gt;Swift: 2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After it’s finished, the app looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Preferences Window.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;#NSTabViewController&lt;br&gt;The mainly used class is &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/AppKit/Reference/NSTabViewController_Class/&quot;&gt;&lt;code&gt;NSTabViewController&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;An &lt;code&gt;NSTabViewController&lt;/code&gt; object is a container view controller that manages a tab view interface, which organizes multiple pages of content but displays only one of those pages at a time. Each page of content is managed by a separate child view controller. Navigation between child view controllers is accomplished with the help of an NSTabView object, which the tab view controller manages. When the user selects a new tab, the tab view controller displays the content associated with the associated child view controller, replacing the previous content.&lt;/p&gt;
    
    </summary>
    
      <category term="Cocoa" scheme="http://atjason.com/en/categories/Cocoa/"/>
    
    
  </entry>
  
  <entry>
    <title>Storyboard</title>
    <link href="http://atjason.com/en/Cocoa/Storyboard.html"/>
    <id>http://atjason.com/en/Cocoa/Storyboard.html</id>
    <published>2016-04-13T01:50:00.000Z</published>
    <updated>2016-05-07T05:14:31.000Z</updated>
    
    <content type="html">&lt;p&gt;This article introduces how to build status bar app on Mac OS X using Cocoa with Swift. The source code can be downloaded &lt;a href=&quot;https://github.com/atjason/LearnCocoaWithSwift/tree/master/32_Storyboards/MirrorChatter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Development environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS X: 10.11.4&lt;/li&gt;
&lt;li&gt;XCode: 7.3&lt;/li&gt;
&lt;li&gt;Swift: 2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After it’s finished, the app looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Mirror Chatter.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Storyboard-introduction&quot;&gt;&lt;a href=&quot;#Storyboard-introduction&quot; class=&quot;headerlink&quot; title=&quot;Storyboard introduction&quot;&gt;&lt;/a&gt;Storyboard introduction&lt;/h1&gt;&lt;p&gt;With storyboards, you can combine as much (or as little) of your application as you want in one canvas, as well as visualize how the parts relate to each other.&lt;br&gt;Storyboards are organized by scenes (windows and views), which are connected to each other by segues. Segues describe the scenes’ relationships to one another. Storyboards can be used to describe a window and its popover or sheet – or a complicated graph of nested views, each with its own view controller, which previously would have necessitated programmatic construction.&lt;br&gt;Storyboards were added to OS X in 10.10 Yosemite and to iOS in version 5.&lt;/p&gt;
&lt;p&gt;To create the relationship segue between the window controller and the split view controller, control-drag from the blue Window Controller icon in the border on top of the window controller down to the split view controller. In the pop-up Relationship Segue window that appears, select window content.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Create segue.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;#How is the Storyboard Loaded?&lt;/p&gt;
&lt;p&gt;Just like with MainMenu.xib, the answer is in the Info.plist.&lt;br&gt;If you check the Info.plist for this project you will see that the key NSMainStoryboardFile is set to Main.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Main Storyboard.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Scenes can also be loaded from storyboards programmatically. The NSStoryboard class provides this, much like NSBundle does for NIB loading. Within a storyboard, one scene can be designated as the &lt;strong&gt;initial controller&lt;/strong&gt;. This is used in the application’s Main.storyboard to designate the application window to be opened at launch.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Storyboard initial controller.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Controllers within a storyboard can also be instantiated by their identifier, which is set in the identity inspector. If you had a view controller with an identifier of Palette, you could instantiate the view controller and show it in a window using the following code:&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; storyboard = &lt;span class=&quot;type&quot;&gt;NSStoryboard&lt;/span&gt;(name: &lt;span class=&quot;string&quot;&gt;&quot;Main&quot;&lt;/span&gt;, bundle: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; vc = storyboard.instantiateControllerWithIdentifier(&lt;span class=&quot;string&quot;&gt;&quot;Palette&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;NSViewController&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        paletteWindow = &lt;span class=&quot;type&quot;&gt;NSWindow&lt;/span&gt;(contentViewController: vc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        paletteWindow.makeKeyAndOrderFront(&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This article introduces how to build status bar app on Mac OS X using Cocoa with Swift. The source code can be downloaded &lt;a href=&quot;https://github.com/atjason/LearnCocoaWithSwift/tree/master/32_Storyboards/MirrorChatter&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Development environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS X: 10.11.4&lt;/li&gt;
&lt;li&gt;XCode: 7.3&lt;/li&gt;
&lt;li&gt;Swift: 2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After it’s finished, the app looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Mirror Chatter.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Storyboard-introduction&quot;&gt;&lt;a href=&quot;#Storyboard-introduction&quot; class=&quot;headerlink&quot; title=&quot;Storyboard introduction&quot;&gt;&lt;/a&gt;Storyboard introduction&lt;/h1&gt;&lt;p&gt;With storyboards, you can combine as much (or as little) of your application as you want in one canvas, as well as visualize how the parts relate to each other.&lt;br&gt;Storyboards are organized by scenes (windows and views), which are connected to each other by segues. Segues describe the scenes’ relationships to one another. Storyboards can be used to describe a window and its popover or sheet – or a complicated graph of nested views, each with its own view controller, which previously would have necessitated programmatic construction.&lt;br&gt;Storyboards were added to OS X in 10.10 Yosemite and to iOS in version 5.&lt;/p&gt;
&lt;p&gt;To create the relationship segue between the window controller and the split view controller, control-drag from the blue Window Controller icon in the border on top of the window controller down to the split view controller. In the pop-up Relationship Segue window that appears, select window content.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Create segue.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Cocoa" scheme="http://atjason.com/en/categories/Cocoa/"/>
    
    
  </entry>
  
  <entry>
    <title>Status Bar App</title>
    <link href="http://atjason.com/en/Cocoa/Status%20Bar%20App.html"/>
    <id>http://atjason.com/en/Cocoa/Status Bar App.html</id>
    <published>2016-04-08T04:56:00.000Z</published>
    <updated>2016-05-07T05:14:21.000Z</updated>
    
    <content type="html">&lt;p&gt;This article introduces how to build status bar app on Mac OS X using Cocoa with Swift. The source code can be downloaded &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/tree/master/StatusBarApp/StatusBarApp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Development environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS X: 10.11.4&lt;/li&gt;
&lt;li&gt;XCode: 7.3&lt;/li&gt;
&lt;li&gt;Swift: 2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After it’s finished, the app looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Status App.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;#How to Run as Status Bar App?&lt;br&gt;In another word, how to make the application not show a dock icon? The key point is to modify the application’s Info.plist file and indicate that it’s an agent. “Agent” is Apple’s term for a background application that doesn’t present a dock icon.&lt;br&gt;Select the project at the top of the project navigator. Open the Info tab at the top of the main editor. Add a new entry of &lt;strong&gt;Application is agent (UIElement)&lt;/strong&gt; and set the value of this entry to YES.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Application is agent.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;#How to Let Status App Start?&lt;br&gt;It’s better don’t write much code in AppDelegate or other single class. To do it, I split main code in these 2 controllers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;StatusItemController&lt;br&gt;This controller is mainly to ‘start’ the app, i.e., init the status bar item. And also set the menu for status bar item.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;StatusMenuController&lt;br&gt;This controller mainly works as the delegate of status bar item’s menu. E.g., implement the actions of menu items.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then, how to let the app start? Steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open ‘MainMenu.xib’.&lt;/li&gt;
&lt;li&gt;Create Menu and sub-menus.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/Create Menu.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add an Object. Set its class to ‘StatusMenuController’.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/Add Object.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Set Object Class.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add another Object of ‘StatusItemController’.&lt;/li&gt;
&lt;li&gt;Connect Menu object to StatusMenuController’s ‘menu’ outlet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/Connect Menu.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connect StatusMenuController to StatusItemController’s ‘menuController’ outlet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/Connect Menu Controller.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open StatusItemController.swift, init the status bar item in ‘awakeFromNib’.&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StatusItemController&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; statusItem: &lt;span class=&quot;type&quot;&gt;NSStatusItem&lt;/span&gt;!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; menuController: &lt;span class=&quot;type&quot;&gt;StatusMenuController&lt;/span&gt;!  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;awakeFromNib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statusItem = &lt;span class=&quot;type&quot;&gt;NSStatusBar&lt;/span&gt;.systemStatusBar()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .statusItemWithLength(&lt;span class=&quot;type&quot;&gt;NSVariableStatusItemLength&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statusItem.title = &lt;span class=&quot;string&quot;&gt;&quot;App&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statusItem.highlightMode = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statusItem.menu = menuController.menu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s it. Now the app should be able to correctly start. As you can see, the key point is, app will init the ‘MainMenu.xib’ (as defined in Info.plist &amp;gt; ‘Main nib file base name’), then all the objects in ‘MainMenu.xib” will be created. So, the menu and controllers you added in ‘MainMenu.xib” will be created. Clear?&lt;/p&gt;
&lt;p&gt;In this case, the AppDelegate could even keep empty. Cool, right?&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@NSApplicationMain&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AppDelegate&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;NSApplicationDelegate&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;#How to Show Percent in Status Bar?&lt;br&gt;There’s class of &lt;code&gt;NSProgressIndicator&lt;/code&gt;. The fact of it is a view. Thus the problem becomes how to add this view to status bar.&lt;/p&gt;
&lt;p&gt;You will find, the &lt;code&gt;NSStatusItem.view&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, thus you can’t add to its subview. From the API of &lt;code&gt;NSStatusItem&lt;/code&gt; we can found, it’s suggested to use &lt;code&gt;NSStatusItem.button&lt;/code&gt; to customize. OK, we can add view to subviews of the &lt;code&gt;button&lt;/code&gt;.&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// The button that is displayed in the status bar. This is created automatically on the creation of the StatusItem. Behavior customization for the button, such as image, target/action, tooltip, can be set with this property.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@available&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;OSX&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.10&lt;/span&gt;, *)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; button: &lt;span class=&quot;type&quot;&gt;NSStatusBarButton&lt;/span&gt;? &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;That’s not finished. Using this code could show the percent in status bar, but the size of status bar item is incorrect. How to deal with it? To be honest, I didn’t find a good way, but find a walkaround way, i.e., add an &lt;strong&gt;empty&lt;/strong&gt; image to the status bar item. And then add &lt;code&gt;NSProgressIndicator&lt;/code&gt; to the &lt;code&gt;button&lt;/code&gt;. It’s not good, but works. The code is as following:&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; button = statusItem.button &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;FIXME:&lt;/span&gt; it works, but obviously not good.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; frame = &lt;span class=&quot;type&quot;&gt;NSRect&lt;/span&gt;(x: &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, y: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, width: &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;, height: &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; progressIndicator = &lt;span class=&quot;type&quot;&gt;NSProgressIndicator&lt;/span&gt;(frame: frame)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        progressIndicator.style = .&lt;span class=&quot;type&quot;&gt;SpinningStyle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        progressIndicator.indeterminate = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        progressIndicator.doubleValue = &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Use empty image to extand the status item&#39;s size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        statusItem.image = &lt;span class=&quot;type&quot;&gt;NSImage&lt;/span&gt;(named: &lt;span class=&quot;string&quot;&gt;&quot;EmptyIconImage&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        button.addSubview(progressIndicator)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;And&lt;/span&gt; the percent looks like:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;![](../media/&lt;span class=&quot;type&quot;&gt;Percent&lt;/span&gt;.jpg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;![](../media/&lt;span class=&quot;type&quot;&gt;Percent_Dark&lt;/span&gt;.jpg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;type&quot;&gt;How&lt;/span&gt; to &lt;span class=&quot;type&quot;&gt;Disable&lt;/span&gt; a &lt;span class=&quot;type&quot;&gt;Menu&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Item&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;It&lt;/span&gt; sounds very easy. &lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; the `&lt;span class=&quot;type&quot;&gt;NSMenuItem&lt;/span&gt;.enabled = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;`. &lt;span class=&quot;type&quot;&gt;But&lt;/span&gt; the fact &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; not. &lt;span class=&quot;type&quot;&gt;Read&lt;/span&gt; the description &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; `&lt;span class=&quot;type&quot;&gt;NSMenuItem&lt;/span&gt;.autoenablesItems`:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```swift&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Set and get whether the menu autoenables items.  If a menu autoenables items, then calls to -[NSMenuItem setEnabled:] are ignored, and the enabled state is computed via the NSMenuValidation informal protocol below.  Autoenabling is on by default. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; autoenablesItems: &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;As you can see, &lt;code&gt;NSMenuItem.autoenablesItems&lt;/code&gt; is enabled by default. And if it’s enabled, the set of &lt;code&gt;NSMenuItem.enabled&lt;/code&gt; property will be ignored. Thus, if you want to manually control the &lt;code&gt;NSMenuItem.enabled&lt;/code&gt; property, first disable the &lt;code&gt;NSMenuItem.autoenablesItems&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;#How to Support Dark Mode?&lt;br&gt;There’re 2 key points needed to support dark mode of OS X.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The icon itself should support. To be exactly, the background of the icon should be transparent.&lt;/li&gt;
&lt;li&gt;Set the &lt;code&gt;NSMenuItem.image?.template = true&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* The &#39;template&#39; property is metadata that allows clients to be smarter about image processing.  An image should be marked as a template if it is basic glpyh-like black and white art that is intended to be processed into derived images for use on screen.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; NSButtonCell applies effects to images based on the state of the button.  For example, images are shaded darker when the button is pressed.  If a template image is set on a cell, the cell can apply more sophisticated effects.  For example, it may be processed into an image that looks engraved when drawn into a cell whose interiorBackgroundStyle is NSBackgroundStyleRaised, like on a textured button.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; template: &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The normal and dark status bar items look like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Icon.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;../media/Icon_Dark.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;#How to Support Indentation Level?&lt;br&gt;Easy. Just set the &lt;code&gt;NSMenuItem.indentationLevel&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Indentation.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;#How to Pop Over?&lt;br&gt;It’s easy to pop over status item. Check the following code:&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; button = statusItem.button &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  popover.showRelativeToRect(button.bounds, ofView: button, preferredEdge: .&lt;span class=&quot;type&quot;&gt;MinY&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;But it’s hard to pop over menu item, as menu item’s view is nil by default. And then no view or bound to show popover relatively. Ever see some other app like &lt;a href=&quot;http://www.clipmenu.com/blog/2014/11/11/clipmenu-1-0-0a1-released/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ClipMenu&lt;/a&gt; could implement this feature, but hasn’t found how to do it.&lt;/p&gt;
&lt;p&gt;Another walkaground is to use &lt;code&gt;NSMenuItem.toolTip&lt;/code&gt; to show additional information of a menu item.&lt;/p&gt;
&lt;p&gt;#What Left?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tag and representedObject&lt;/li&gt;
&lt;li&gt;action&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This article introduces how to build status bar app on Mac OS X using Cocoa with Swift. The source code can be downloaded &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/tree/master/StatusBarApp/StatusBarApp&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Development environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS X: 10.11.4&lt;/li&gt;
&lt;li&gt;XCode: 7.3&lt;/li&gt;
&lt;li&gt;Swift: 2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After it’s finished, the app looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Status App.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;#How to Run as Status Bar App?&lt;br&gt;In another word, how to make the application not show a dock icon? The key point is to modify the application’s Info.plist file and indicate that it’s an agent. “Agent” is Apple’s term for a background application that doesn’t present a dock icon.&lt;br&gt;Select the project at the top of the project navigator. Open the Info tab at the top of the main editor. Add a new entry of &lt;strong&gt;Application is agent (UIElement)&lt;/strong&gt; and set the value of this entry to YES.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Application is agent.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Cocoa" scheme="http://atjason.com/en/categories/Cocoa/"/>
    
    
  </entry>
  
  <entry>
    <title>Use NSOutlineView With NSTreeController</title>
    <link href="http://atjason.com/en/Cocoa/Outline%20With%20Controller.html"/>
    <id>http://atjason.com/en/Cocoa/Outline With Controller.html</id>
    <published>2016-04-06T12:38:00.000Z</published>
    <updated>2016-05-07T05:14:09.000Z</updated>
    
    <content type="html">&lt;p&gt;This article describes the steps to use NSOutlineView With NSTreeController. The source code can be downloaded &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/tree/master/Outline/OutlineWithController&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Development environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS X: 10.11.4&lt;/li&gt;
&lt;li&gt;XCode: 7.3&lt;/li&gt;
&lt;li&gt;Swift: 2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#Steps&lt;/p&gt;
&lt;p&gt;##Create Basic Project&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/40ccec2db2584251483fe4dc0b9cc02746aebde3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#40ccec2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;##Add UI Controls&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/2853186db767c0790c1ef3b99de53338818e39c6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#2853186&lt;/a&gt;.&lt;br&gt;After done, the UI looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/UI_1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##Add Model Class of “Node”&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/516acc4b6363a7d28862473ff464c33ef0b17a48&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#516acc4&lt;/a&gt;.&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; title = &lt;span class=&quot;string&quot;&gt;&quot;Node&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; children = [&lt;span class=&quot;type&quot;&gt;Node&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(title: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.title = title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Prepare-Demo-Nodes-Data&quot;&gt;&lt;a href=&quot;#Prepare-Demo-Nodes-Data&quot; class=&quot;headerlink&quot; title=&quot;Prepare Demo Nodes Data&quot;&gt;&lt;/a&gt;Prepare Demo Nodes Data&lt;/h2&gt;&lt;p&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/f9148114ec25db9a10e654f776396d1b2a2952a0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#f914811&lt;/a&gt;.&lt;br&gt;Node structure:&lt;br&gt;- Node&lt;br&gt;- Group&lt;br&gt;-– Node A&lt;br&gt;-– Node B&lt;/p&gt;
&lt;p&gt;##Add and Configure NSTreeController&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/06b01a8ffcbe39dc07403ea74f89b8a8ef420015&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#06b01a8&lt;/a&gt;.&lt;br&gt;Steps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add NSTreeController in the .xib and select it.&lt;/li&gt;
&lt;li&gt;Go to “Attricutes Inspector”.&lt;ul&gt;
&lt;li&gt;Set the “Key Paths &amp;gt; Children” to “children”.  &lt;/li&gt;
&lt;li&gt;Choose “Mode” Class and set “Class Name” to “OutlineWithController.Node”.&lt;/li&gt;
&lt;li&gt;Select “Prepares Content”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/NSTreeController Attricutes Inspector.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to “Binding Inspector”.&lt;ul&gt;
&lt;li&gt;Bind “Content Array” to self.nodes (which was created in previous step).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/NSTreeController Binding Inspector.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;##Bind NSOutlineView&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/f941f7be8e87ec8d99e67aaae4e059892b56e897&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#f941f7b&lt;/a&gt;.&lt;br&gt;Steps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select “Outline View”.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to “Binding Inspector”.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bind “Content” to “Tree Controller”‘s “arrangedObjects”. Ignore the warning in “Model Key Path”.&lt;/li&gt;
&lt;li&gt;Bind “Selection Index Paths” to Tree Controller’s “selectionIndexPaths”.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/Outline View Binding Inspector.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select “Table View Cell”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Go to “Binding Inspector”.&lt;ul&gt;
&lt;li&gt;Bind “Content” to “Tree Cell View”‘s “objectValue.title”. Node: here the “objectValue” is the class Node as you defined it in the tree controller.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/Table View Cell Binding Inspector.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to “Attributes Inspector”.&lt;ul&gt;
&lt;li&gt;Set “Behavior” to “Editable”.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/Table View Cell Attributes Inspector.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Run the app, you should see the app like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/UI_2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;##Add Node and Remove It&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/d9b71976817eb248db1c19e404e8db16e96187a2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#d9b7197&lt;/a&gt;.&lt;br&gt;Steps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Right click on the tree controller.&lt;/li&gt;
&lt;li&gt;Connect “add:” to “Add Node” menu item.&lt;/li&gt;
&lt;li&gt;Connect “addChild:” to “Add Child Node” menu item.&lt;/li&gt;
&lt;li&gt;Connect “remove:” to edit button.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../media/Connect Tree Controller.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;That’s it. Run the app. You should be able to add node or remove it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/UI_3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;##Edit Selected Node&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/22e2c073297d8887b13c97d9030ae5dee30e12c6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#22e2c07&lt;/a&gt;.&lt;br&gt;The key code is here:&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;editNode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(sender: NSObject)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; row = outlineView.selectedRow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; row != -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    outlineView.editColumn(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, row: row, withEvent: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, select: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;##Disable Remove and Edit Controls if no Node Selected&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/eb7decdf6a2baeb60f6883e287899ab61d825af8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#eb7decd&lt;/a&gt;.&lt;br&gt;The key point is to bind the “Enabled” attribute to tree controller’s “canRemove” controller key.&lt;br&gt;Another point is, when app starts maybe nothing was selected. In this case, disable the Outline’s “Attributes &amp;gt; Selection &amp;gt; Empty”, and select the Tree Controller’s “Attributes &amp;gt; Avoid Empty Selection”.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This article describes the steps to use NSOutlineView With NSTreeController. The source code can be downloaded &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/tree/master/Outline/OutlineWithController&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Development environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS X: 10.11.4&lt;/li&gt;
&lt;li&gt;XCode: 7.3&lt;/li&gt;
&lt;li&gt;Swift: 2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#Steps&lt;/p&gt;
&lt;p&gt;##Create Basic Project&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/40ccec2db2584251483fe4dc0b9cc02746aebde3&quot;&gt;#40ccec2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;##Add UI Controls&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/2853186db767c0790c1ef3b99de53338818e39c6&quot;&gt;#2853186&lt;/a&gt;.&lt;br&gt;After done, the UI looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/UI_1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Cocoa" scheme="http://atjason.com/en/categories/Cocoa/"/>
    
    
  </entry>
  
  <entry>
    <title>Use NSOutlineView With DataSource and Delegate</title>
    <link href="http://atjason.com/en/Cocoa/Outline.html"/>
    <id>http://atjason.com/en/Cocoa/Outline.html</id>
    <published>2016-04-06T05:11:00.000Z</published>
    <updated>2016-05-07T05:14:16.000Z</updated>
    
    <content type="html">&lt;p&gt;This article describes the steps to use NSOutlineView With NSOutlineViewDataSource and NSOutlineViewDelegate. The source code can be downloaded&lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/tree/master/Outline/Outline&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Development environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS X: 10.11.4&lt;/li&gt;
&lt;li&gt;XCode: 7.3&lt;/li&gt;
&lt;li&gt;Swift: 2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#Steps&lt;/p&gt;
&lt;p&gt;##Create Basic Project&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/fa626ee5f880da924a1c7fd7b8b988015020f2e6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#fa626ee&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;##Add Model Class of “Node”&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/e302b91f3d4268714323fd3d94c21a781ed135fb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#e302b91&lt;/a&gt;.&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; title = &lt;span class=&quot;string&quot;&gt;&quot;Node&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isGroup = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; children = [&lt;span class=&quot;type&quot;&gt;Node&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; parent: &lt;span class=&quot;type&quot;&gt;Node&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(title: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.title = title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isLeaf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; children.isEmpty&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##Add UI Controls&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/5dee8d160650624d55333808b7fa5e9fba6e0b9c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#5dee8d1&lt;/a&gt;.&lt;br&gt;After done, the UI looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/UI_11.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;##Implement NSOutlineViewDataSource&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/c467d0b36a58994dca5f376d668777d8484a72fd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#c467d0b&lt;/a&gt;.&lt;br&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Set NSOutlineView’s dataSource to File’s Owner.&lt;br&gt;&lt;img src=&quot;../media/Data Source.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bind value “Table Cell View” to “Table Cell View” &amp;gt; Model Key Path: objectValue.title.&lt;br&gt;&lt;img src=&quot;../media/BindTableView.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After done, the UI looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/UI_12.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;##Implement NSOutlineViewDelegate&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/300948eaabd9afe72c1addcb0438102bc21c2783&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#300948e&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set NSOutlineView’s delegate to File’s Owner.&lt;br&gt;&lt;img src=&quot;../media/Delegate.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;##Add Node and Group&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/f18c61f94bd813f0ae2c0d2d33dbc6054f530d61&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#f18c61f&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The logic to add node or group in correct position is very boring. That’s why binding will be  a good friend.&lt;/li&gt;
&lt;li&gt;There’re 2 ways to insert item in outline view. One is update the data modal, then call &lt;code&gt;NSOutlineView.reloadData()&lt;/code&gt;. But this will let UI flash. So it’s better to manually insert item in outline view (e.g., use &lt;code&gt;NSOutlineView.insertItemsAtIndexes&lt;/code&gt;). Another benefit is could use animation during inserting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After done, you can add node or group. The UI looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../media/Group.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;##Implement other UI Operations&lt;br&gt;The operations include remove, edit, move up and move down. It’s not hard. But the logic is complex and boring. Be careful.&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/3f7ffaa8efb62b5e08d2f53da693da05055a80cf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#3f7ffaa&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Notes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Could create a &lt;strong&gt;dynamic&lt;/strong&gt; property (e.g., &lt;code&gt;dynamic var removeButtonEnabled = false&lt;/code&gt;), and then bind a control’s enable property to it. e.g.,&lt;br&gt;&lt;img src=&quot;../media/Bind Enabled.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Should set table view cell’s behavior as “Editable” to edit it.&lt;br&gt;&lt;img src=&quot;../media/Editable.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This article describes the steps to use NSOutlineView With NSOutlineViewDataSource and NSOutlineViewDelegate. The source code can be downloaded&lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/tree/master/Outline/Outline&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Development environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS X: 10.11.4&lt;/li&gt;
&lt;li&gt;XCode: 7.3&lt;/li&gt;
&lt;li&gt;Swift: 2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#Steps&lt;/p&gt;
&lt;p&gt;##Create Basic Project&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/fa626ee5f880da924a1c7fd7b8b988015020f2e6&quot;&gt;#fa626ee&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;##Add Model Class of “Node”&lt;br&gt;Refer to commit till &lt;a href=&quot;https://github.com/atjason/CocoaDemoWithSwift/commit/e302b91f3d4268714323fd3d94c21a781ed135fb&quot;&gt;#e302b91&lt;/a&gt;.&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; title = &lt;span class=&quot;string&quot;&gt;&quot;Node&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isGroup = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; children = [&lt;span class=&quot;type&quot;&gt;Node&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; parent: &lt;span class=&quot;type&quot;&gt;Node&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(title: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.title = title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isLeaf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; children.isEmpty&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Cocoa" scheme="http://atjason.com/en/categories/Cocoa/"/>
    
    
  </entry>
  
</feed>
